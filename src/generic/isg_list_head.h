#define STRUCT_KIND list
#include "isg_defines.h"

#include "isl_list.h"
#include "isl_types.h"


typedef struct ISG_STRUCT_NAME {
    ISG_VALUE_TYPE* data;
    ist_usize       size;
} ISG_STRUCT_NAME;

ISG_STRUCT_NAME  ISG_FN_NAME(consm)(ist_usize _capacity);
ISG_STRUCT_NAME  ISG_FN_NAME(consc)(ist_usize _capacity);
ISG_STRUCT_NAME* ISG_FN_NAME(initm)(ISG_STRUCT_NAME* this, ist_usize _capacity);
ISG_STRUCT_NAME* ISG_FN_NAME(initc)(ISG_STRUCT_NAME* this, ist_usize _capacity);
ISG_STRUCT_NAME* ISG_FN_NAME(malloc)(ist_usize _capacity);
ISG_STRUCT_NAME* ISG_FN_NAME(calloc)(ist_usize _capacity);
ISG_STRUCT_NAME* ISG_FN_NAME(create)(ist_usize _capacity, ist_bool _doclean);
void             ISG_FN_NAME(resizm)(ISG_STRUCT_NAME* this, ist_usize _newcap);
void             ISG_FN_NAME(resizc)(ISG_STRUCT_NAME* this, ist_usize _newcap);
void             ISG_FN_NAME(addm)(ISG_STRUCT_NAME* this, ISG_VALUE_TYPE _value);
void             ISG_FN_NAME(addc)(ISG_STRUCT_NAME* this, ISG_VALUE_TYPE _value);
void             ISG_FN_NAME(clean)(ISG_STRUCT_NAME* this);
void             ISG_FN_NAME(delete)(ISG_STRUCT_NAME* this);
ISG_VALUE_TYPE*  ISG_FN_NAME(data)(ISG_STRUCT_NAME* this);
ist_usize        ISG_FN_NAME(size)(ISG_STRUCT_NAME* this);

#ifndef ISG_LIST_HEAD_FOREACH_DEFINED
#define ISG_LIST_HEAD_FOREACH_DEFINED

/**
 * Foreach definition for all list generated by this header file.
 * You must provide the list instance instead of the list pointer.
 */

/**
 * You must provide the list instance instead of the list pointer.
 * from: the start index of the list, we don't check this index, so make sure it is valid.
 * to: the end index of the list, we also don't check this index, so make sure it is valid.
 * names: the names for the iterate parameter, it as optional.
 */
#define isg_list_foreach_from_to(_iterp, _listv, _from, _to, _names...) \
    isl_list_foreach_from_to (_iterp, (_listv).data, _from, _to, ##_names)

/**
 * You must provide the list instance instead of the list pointer.
 * from: the start index of the list, we don't check this index, so make sure it is valid.
 * names: the names for the iterate parameter, it as optional.
 * It will automatically iterate to the end of the list (which decide by size).
 */
#define isg_list_foreach_from(_iterp, _listv, _from, _names...) \
    isl_list_foreach_from (_iterp, (_listv).data, _from, ##_names)

/**
 * You must provide the list instance instead of the list pointer.
 * to: the end index of the list, we also don't check this index, so make sure it is valid.
 * names: the names for the iterate parameter, it as optional.
 * It will automatically iterate from the start of the list.
 */
#define isg_list_foreach_to(_iterp, _listv, _to, _names...) \
    isl_list_foreach_to (_iterp, (_listv).data, _to, ##_names)

/**
 * You must provide the list instance instead of the list pointer.
 * names: the names for the iterate parameter, it as optional.
 * It will automatically iterate from the start to the end of the list (which decide by size).
 */
#define isg_list_foreach(_iterp, _listv, _names...) \
    isl_list_foreach_to (_iterp, (_listv).data, (_listv).size, ##_names)

#endif // ISG_LIST_HEAD_FOREACH_DEFINED

#include "isg_undefs.h"