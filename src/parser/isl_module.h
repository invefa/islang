#ifndef ISL_MODULE_H
#define ISL_MODULE_H

/*
    A module is an extract of source code.
    It will store various data structures expressed by the source code.
*/

#include "isl_string.h"

ist_string isl_filename_catchby_filepath(ist_string _filepath);

typedef struct ist_module {

    /*
        The name of this module, used to report message or import this module.
        It will be generated by source code file name:
        module.name = isl_filename_catchby_filepath(filepath);
        We will extract the filename from the filepath and set it as the name of this module.
    */
    ist_string name;
    ist_string filepath;

    /*
        The list of string buffers for this module, it will store all string buffers.
        Including the name of all c-structures which serving this module (including the name of it self),
        as well as the source code read from the source code file or generated by macro,
        and the generated string from source code (such as string literal or identifier), etc.
        This list was designed for memory management, to ensure that the memory will be released
        when the compilation is finished.
    */
    ist_string* strbuf_list;
    ist_usize   strbuf_count;

    /*
        The list of source indexes for this module, it will store all source indexes.
        It allows we find the source code strbuf that mixed in the strbuf_list.
        If you want to add a new source code, you should add a new source index here,
        to delete a source code, you should delete the corresponding source index here.
    */
    ist_usize* srcidx_list;
    ist_usize  srcidx_count;

} ist_module;

ist_module  ist_module_consby_full(ist_string _name, ist_string _filepath);
ist_module* ist_module_initby_full(ist_module* this, ist_string _name, ist_string _filepath);
ist_module* ist_module_createby_full(ist_string _name, ist_string _filepath);

ist_module  ist_module_consby_filepath(ist_string _filepath);
ist_module* ist_module_initby_filepath(ist_module* this, ist_string _filepath);
ist_module* ist_module_createby_filepath(ist_string _filepath);

void        ist_module_clean(ist_module* this);
void        ist_module_delete(ist_module* this);

ist_usize   ist_module_register_strbuf(ist_module* this, ist_string _strbuf);
ist_usize   ist_module_register_source(ist_module* this, ist_string _source);


#endif